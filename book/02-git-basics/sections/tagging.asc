[[_git_tagging]]
=== Đánh Dấu

(((tags)))
Cũng giống như đa số các hệ thống quản lý phiên bản khác, Git có khả năng đánh dấu (`tag`) các mốc quan trọng trong lịch sử của dự án.
Nhìn chung, mọi người sử dụng chức năng này để đánh dấu các thời điểm phát hành (ví dụ như v1.0).
Trong phần này bạn sẽ được học làm sao để liệt kê các nhãn (`tag`) hiện có, làm sao để tạo nhãn mới, và các loại nhãn khác nhau hiện có.

==== Liệt kê Nhãn (Tag)

Liệt kê các nhãn hiện có trong Git khá là đơn giản.
Bạn chỉ cần gõ `git tag`:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

Lệnh này sẽ liệt kê các nhãn được sắp xếp theo thứ tự an-pha-bê; thứ tự mà nó tạo ra không thực sự quan trọng lắm.

Bạn cũng có thể tìm kiếm một nhãn sử dụng mẫu (pattern).
Ví dụ, trong kho chứa mã nguồn của Git có chứa hơn 500 nhãn.
The Git source repo, for instance, contains more than 500 tags.
Nếu như bạn chỉ quan tâm đến các nhãn thuộc dải 1.8.5, bạn có thể chạy lệnh sau:

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

==== Tạo Nhãn Mới

Git sử dụng hai loại nhãn chính: đơn giản (lightweight) và có chú thích (annotated).

Nhãn đơn giản tương đối giống với nhánh (`branch`) nhưng không thay đổi - nó chỉ là một con trỏ trỏ tới một chuyển giao xác định.

Nhãn có chú thích lại được lưu trữ như một đối tượng bình thường khác trong cơ sở dữ liệu của Git.
Chúng được băm; chứa tên người dán nhãn, địa chỉ email; ngày tháng; có thông điệp kèm theo; và có thể được ký và xác thực bằng GNU Privacy Guard (GPG)
They're checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).
Thông thường, nhãn có chú thích được khuyến khích sử dụng vì nó có chứa các thông tin trên; tuy nhiên nếu như bạn muốn một nhãn tạm thời hoặc vì một lý do nào đó bạn không muốn lưu trữ các thông tin trên, nhãn đơn giản lại là sự lựa chọn hợp lý.

[[_annotated_tags]]
==== Nhãn có Chú thích

(((tags, annotated)))
Tạo nhãn có chú thích trong Git rất là đơn giản.
Cách dễ dàng nhất là sử dụng tùy chọn `-a` khi gọi lệnh `tag`:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

Tham số `-m` để truyền thông điệp cho nhãn, thông điệp này sẽ được lưu cùng với nhãn.
Nếu như bạn không chỉ định thông điệp cho nhãn có chú thích, Git sẽ mở trình soạn thảo và yêu cầu bạn nhập nội dung vào đó.

Bạn có thể xem được thông tin của nhãn cùng với chuyển giao được dán nhãn bằng cách sử dụng lệnh `git show`:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

Nó sẽ hiện thị thông tin người dán nhãn, ngày chuyển giao được dán nhãn, và thông báo chú thích trước khi hiện thông tin của chuyển giao.

==== Nhãn Đơn giản

(((tags, lightweight)))
Một cách khác để dán nhãn các chuyển giao là sử dụng nhãn đơn giản (lightweight tag).
Cơ bản nó là mã băm của một chuyển giao được lưu lại vào trong một tập tin - ngoài ra không còn thông tin nào khác.
Để tạo một nhãn đơn giản, bạn chỉ cần không sử dụng các tham số `-a`, `-s`, or `-m`:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

Lúc này, nếu bạn gọi `git show` trên nhãn đó, bạn sẽ không thấy các thông tin bổ sung nữa.(((git commands, show)))
Lệnh này chỉ hiển thị thông tin về chuyển giao thôi:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Đánh Nhãn Trễ

Bạn cũng có thể dán nhãn các chuyển giao mà bạn đã thực hiện trước đó.
Giả sử lịch sử chuyển giao của bạn giống như sau:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Bây giờ, giả sử bạn quên không dán nhãn dự án ở phiên bản v1.2, tương đương với chuyển giao ``updated rakefile''.
Bạn vẫn có thể thêm nhãn vào lúc này.
Để làm được điều đó, bạn bạn cần chỉ định mã băm của chuyển giao (hoặc một phần của nó) ở cuối lệnh:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

Bạn có thể thấy là chuyển giao đã được dán nhãn:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== Chia sẻ các Nhãn

Mặc định, lệnh `git push` không chuyển các nhãn lên máy chủ.(((git commands, push)))
Bạn phải chỉ định một cách rõ ràng để có thể đẩy các nhãn lên máy chủ để sau khi đã tạo ra chúng.
Quá trình này giống như chia sẻ cách nhánh - bạn có thể chạy `git push origin [tagname]`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

Nếu bạn có rất nhiều nhãn muốn đẩy lên cùng một lúc, bạn có thể sử dụng tham số `--tags` cho lệnh `git push`.
Nó sẽ truyền tất cả các nhãn có trong kho chứa của bạn lên máy chủ.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Bây giờ, nếu ai đó sao chép hoặc kéo dữ liệu từ kho chứa của bạn, họ sẽ cũng sẽ có được tất cả các nhãn mà bạn tạo ra.

==== Checking out Tags

Bạn không thể nào `check out` một nhãn trong Git theo cách chúng ta thường hiểu, bởi vì chúng không thể bị thay đổi.
Nếu bạn muốn lấy một phiên bản của kho chứa của bạn về thư mục làm việc, phiên bản nào giống y hệt với một nhãn nào đó, bạn có thể tạo một nhánh từ nhãn đó với lệnh `git checkout -b [branchname] [tagname]`:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Tất nhiên, nếu bạn làm như vậy và thực hiện một chuyển giao, nhánh `version2` của bạn sẽ khác một chút xíu so với nhãn `v2.0.0` bởi vì nó đã dời đi cùng với sự thay đổi mới đó, vì vậy, hãy cẩn thận.
