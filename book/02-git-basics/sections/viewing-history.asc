[[_viewing_history]]
=== Xem Lịch sử Chuyển giao

Sau một thời gian, bạn đã tạo ra rất nhiều chuyển giao, hoặc bạn mới sao chép một kho chứa đã có sẵn những chuyển giao, có thể là cần xem lại chuyện gì đã xảy ra trong quá khứ.
Công cụ cơ bản và mạnh mẽ nhất để làm việc này là lệnh `git log`.

Những ví dụ sau đây sử dụng một dự án rất đơn giản tên là ``simplegit''.
Để lấy dự án này về, gọi lệnh:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Khi bạn gọi `git log` trong dự án này, bạn sẽ nhận được kết quả giống như sau:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Mặc định, khi không có tham số, `git log` liệt kê những chuyển giao trong kho chứa đó theo thứ tự ngược thời gian - tức là, những chuyển giao mới nhất sẽ được hiện ra đầu tiên.
Như bạn có thể thấy, lệnh này liệt kê từng chuyển giao với mã băm SHA-1 của nó, tên và email của tác giả, ngày viết và thông điệp chuyển giao.

Một số lượng lớn các tùy chọn khác nhau của lệnh `git log` có sẵn để cho bạn biết chính xác những cái mà bạn cần tìm.
Sau đây, chúng tôi sẽ cho bạn thấy những tùy chọn phổ biến nhất.

Một trong những tùy chọn hữu ích nhất là `-p`, tùy chọn này sẽ cho biết những thay đổi được mang đến trong từng chuyển giao.
Bạn cũng có thể sử dụng tùy chọn `-2`, tùy chọn này dùng để giới hạn kết quả trong vòng hai (2) chuyển giao cuối cùng:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

Tùy chọn này hiển thị cùng thông tin đó nhưng kèm theo sự thay đổi trực tiếp trong từng mục.
Điều này rất là hữu ích cho việc xét duyệt mã nguồn (code review) hoặc để duyệt nhanh những gì xảy ra trong một loạt các chuyển giao mà một cộng tác viên đã thêm vào.
Bạn cũng có thể sử dụng một loạt các tùy chọn tổng hợp với `git log`.
Ví dụ, nếu bạn muốn xem một số chỉ số tóm tắt cho từng chuyển giao, bạn có thể dùng tùy chọn `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Như bạn có thể thấy, tùy chọn `--stat` in dưới mỗi mục chuyển giao một danh sách các tập tin bị chỉnh sửa, số lượng tập tin thay đổi và số dòng trong các tập tin đó được thêm vào và xóa đi.
Nó cũng đưa ra tóm tắt những thông tin ở cuối.

Một tùy chọn rất hữu ích khác là `--pretty`.
Tùy chọn này thay đổi nội dung đầu ra theo một số định dạng khác với định dạng mặc định.
Một vài tùy chọn được xây dựng sẵn cho các bạn sử dụng.
Tùy chọn `oneline` in mỗi chuyển giao trên một dòng duy nhất, điều này rất hữu dụng khi bạn đang tìm kiếm trong rất nhiều chuyển giao.
Thêm vào đó, các tùy chọn `short`, `full` và `fuller` hiển thị đầu ra với các định dạng gần như giống nhau nhưng có sự khác nhau nhỏ về lượng thông tin theo thứ tự ngắn gọn, đầy đủ, rất đầy đủ:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

Tùy chọn hấp dẫn nhất có lẽ là `format`, tùy chọn này cho phép bạn tự đặt ra định dạng nội dung đầu ra của riêng bạn.
Điều này đặc biệt hữu ích khi bạn phải tạo ra nội dung để phân tích bằng máy - bởi vì bạn có thể đặt ra định dạng một cách rõ ràng, bạn biết nó sẽ không thay đổi cho dù Git có được cập nhật đi chăng nữa:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> liệt kê một số những tùy chọn hữu dụng khác mà tùy chọn `format` sử dụng.

[[pretty_format]]
.Những tùy chọn hữu dụng cho lệnh `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Tùy chọn | Nội dung
| `%H`     | Mã băm của Chuyển giao (commit hash)
| `%h`     | Mã băm rút gọn (Abbreviated commit hash)
| `%T`     | Mã băm của cây (Tree hash)
| `%t`     | Mă băm rút gọn của cây (Abbreviated tree hash)
| `%P`     | Mã băm của những chuyển giao ngay trước (Parent hashes)
| `%p`     | Mã băm rút gọn của những chuyển giao ngay trước (Abbreviated parent hashes)
| `%an`    | Tên Tác giả (Author name)
| `%ae`    | Email Tác giả (Author email)
| `%ad`    | Ngày tạo (định dạng theo tùy chọn --date=option)/Author date (format respects the --date=option)
| `%ar`    | Ngày tạo, tính tương đối theo thời điểm hiện tại (Author date, relative)
| `%cn`    | Tên Người chuyển giao/Committer name
| `%ce`    | Email Người chuyển giao/Committer email
| `%cd`    | Ngày chuyển giao/Committer date
| `%cr`    | Ngày chuyển giao, tương đối/Committer date, relative
| `%s`     | Tiêu đề/Subject
|================================

Bạn có thể đang tự hỏi có gì khác nhau giữa _author_ (tác giả) và _committer_ (người chuyển giao).
Tác giả (author) là người trực tiếp tạo ra phần việc đó, trong khi người chuyển giao là người cuối cùng ghép phần việc đó vào dự án.
Vì vậy, nếu bạn gửi một bản vá tới cho một dự án và một trong những thành viên nòng cốt của dự án ghép bản vá vào dự án, cả hai bạn được được vinh danh - bạn với tư cách là tác giả và thành viên đó với tư cách người chuyển giao.
Chúng ta sẽ đi sâu vào sự khác nhau này trong phần <<_distributed_git>>.

Những tùy chọn `oneline` và `format` đặc biệt hữu dụng với một tùy chọn khác của `log` là `--graph`.
Tùy chọn này thêm một đồ thị ASCII trực quan hiển thị lịch sử phân nhánh và hợp nhất của bạn:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

This type of output will become more interesting as we go through branching and merging in the next chapter.

Those are only some simple output-formatting options to `git log` – there are many more.
<<log_options>> lists the options we've covered so far, as well as some other common formatting options that may be useful, along with how they change the output of the log command.

[[log_options]]
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.
| `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.
| `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.
| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
|================================

==== Limiting Log Output

In addition to output-formatting options, `git log` takes a number of useful limiting options – that is, options that let you show only a subset of commits.
You've seen one such option already – the `-2` option, which show only the last two commits.
In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.

However, the time-limiting options such as `--since` and `--until` are very useful.
For example, this command gets the list of commits made in the last two weeks:

[source,console]
----
$ git log --since=2.weeks
----

This command works with lots of formats – you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.

You can also filter the list to commits that match some search criteria.
The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.
(Note that if you want to specify both author and grep options, you have to add `--all-match` or the command will match commits with either.)

Another really helpful filter is the `-S` option which takes a string and only shows the commits that introduced a change to the code that added or removed that string.
For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:

[source,console]
----
$ git log -Sfunction_name
----

The last really useful option to pass to `git log` as a filter is a path.
If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.

In <<limit_options>> we'll list these and a few other common options for your reference.

[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-(n)`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================

For example, if you want to see which commits modifying test files in the Git source code history are merged and were committed by Junio Hamano in the month of October 2008, you can run something like this:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.
