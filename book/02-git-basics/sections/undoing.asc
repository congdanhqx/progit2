[[_undoing]]
=== Đảo ngược Thay đổi

Tới một lúc nào đó, bạn sẽ muốn hủy bỏ việc gì đó vừa làm.
Bây giờ, chúng ta sẽ cùng xem xét một vài công cụ cơ bản để đảo ngược thay đổi vừa tạo ra.
Hãy cẩn thận bởi vì không phải lúc nào bạn cũng thể đảo ngược những cái đã bị đảo ngược.
Đây là một trong số ít những thứ mà Git có thể khiến bạn mất đi dữ liệu nếu bạn làm không đúng.

Một trong những chuyện khiến việc thay đổi diễn ra thường xuyên là khi bạn chuyển giao (`commit`) quá sớm và có thể quên thêm một số tập tin vào hồ sơ chuyển giao, hoặc là bạn viết thông điệp không như mong muốn.
Nếu như bạn muốn thực hiện lại chuyển giao đó, thì bạn có thể thực hiện việc chuyển giao với tùy chọn `--amend`:

[source,console]
----
$ git commit --amend
----

Lệnh này sử dụng hậu trường (`staging area`) để thực hiện việc chuyển giao mới.
Nếu như bạn không tạo ra thay đổi nào kể từ lần chuyển giao gần nhất (ví dụ, bạn gọi lệnh này ngay sau khi thực hiện lệnh chuyển giao), thì ảnh chụp (`snapshot`) của dự án sẽ vẫn như vậy và cái sẽ bị thay đổi chỉ là thông điệp chuyển giao.

Trình soạn thảo thông điệp chuyển giao lại được mở ra, nhưng thông điệp của lần chuyển giao gần nhất đã xuất hiện sẵn trên đó.
Bạn có thể chỉnh sửa thông điệp như thường lệ nhưng nó sẽ được ghi đè lên thông điệp chuyển giao trước đó.

Ví dụ, bạn đã chuyển giao xong, sau đó, bạn nhận ra đã quên đánh dấu (`stage`) các thay đổi trong tập tin bạn muốn thêm vào lần chuyển giao đó, bạn có thể chạy lệnh sau:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

Kết quả cuối cùng cũng vẫn chỉ là một chuyển giao - chuyển giao thứ hai sẽ thay thế các kết quả của chuyển giao trước đó.

[[_unstaging]]
==== Ngừng Đánh dấu Tập tin đã được Chuẩn bị

Hai phần tiếp theo sẽ minh hoạ làm sao để thoả hiệp các thay đổi giữa hậu trường và thư mục làm việc.
Cái hay ở đây là câu lệnh sử dụng để xác định trạng thái của hai khu vực đồng thời cũng gợi ý cho bạn làm sao thể đảo ngược các thay đổi.
Ví dụ như, giả sử bạn sửa nội dung của hai tập tin và muốn chuyển giao chúng trong hai lần riêng biệt, nhưng bạn đã vô tình sử dụng `git add *` và đánh dấu tất cả.
Vậy làm thể nào để ngừng đánh dấu một trong hai khỏi hậu trường?
Lệnh `git status` sẽ nhắc bạn:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Nếu bạn sử dụng Git với giao diện Tiếng Việt:

[source,console]
----
$ git add *
$ git status
Trên nhánh master
Những thay đổi sẽ được chuyển giao:
  (dùng "git reset HEAD <tập-tin>…" để bỏ ra khỏi bệ phóng)

	đã sửa:        CONTRIBUTING.md
	đã đổi tên:    README.md -> README
----

Ngay phía dưới dòng chữ ``Changes to be committed'' (``Những thay đổi sẽ được chuyển giao'' trong Tiếng Việt), Git chỉ chúng ta sử dụng `git reset HEAD <file>...` để ngừng đánh dấu tập tin.
Vậy thì hãy làm theo gợi ý đó để loại bỏ tập tin `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Nếu bạn sử dụng Git với giao diện Tiếng Việt:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Những thay đổi được đưa ra khỏi bệ phóng sau khi reset:
M	CONTRIBUTING.md
$ git status
Trên nhánh master
Những thay đổi sẽ được chuyển giao:
  (dùng "git reset HEAD <tập-tin>…" để bỏ ra khỏi bệ phóng)

	đã đổi tên:    README.md -> README

Các thay đổi chưa được đặt lên bệ phóng để chuyển giao:
  (dùng "git add <tập-tin>…" để cập nhật những gì sẽ chuyển giao)
  (dùng "git checkout -- <tập-tin>…" để loại bỏ các thay đổi trong thư mục làm việc)

	đã sửa:        CONTRIBUTING.md

----

Lệnh này nhìn hơi lạ, nhưng nó hoạt động như chúng ta mong đợi.
Tập tin `CONTRIBUTING.md` tuy là đã bị sửa đổi nhưng vẫn chưa được đưa vào hậu trường.

[NOTE]
=====
Trong khi `git reset` _có thể_ là một lệnh nguy hiểm nếu như bạn gọi nó với tùy chọn `--hard`, thì trong trường trường hợp này, toàn bộ tập tin trong thư mục làm việc của bạn vẫn không bị ảnh hưởng.
Hơn nữa, không có gì nguy hiểm nếu bạn gọi `git reset` mà không có tùy chọn đi kèm - lệnh này chỉ làm việc với hậu trường của bạn.
=====

Cho tới thời điểm này, sự triệu hồi ma thuật là tất cả mọi thứ bạn cần biết về lệnh `git reset`.
Chúng ta sẽ đi vào chi tiết của lệnh `reset` và làm cách nào để tinh thông nó để làm những thứ hấp dẫn trong chương <<_git_reset>>.

==== Phục Hồi Tập Tin Đã Thay Đổi

Sẽ như thế nào khi bạn nhận ra rằng bạn không muốn giữ những thay đổi trong tập tin `CONTRIBUTING.md`?
Làm thế nào để dễ dàng phục hồi lại những thay đổi đó - phục hồi nó lại trạng thái giống như sau lần chuyển giao gần nhất (hoặc như sau khi sao chép (initialy cloned), hoặc như lúc bạn mới đưa chúng vào thư mục làm việc)?
Thật may mắn, `git status` cũng sẽ cho bạn biết làm sao để thực hiện được việc đó.
In the last example output, the unstaged area looks like this:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Nếu bạn sử dụng Git Tiếng Việt

[source,console]
----
Các thay đổi chưa được đặt lên bệ phóng để chuyển giao:
  (dùng "git add <tập-tin>…" để cập nhật những gì sẽ chuyển giao)
  (dùng "git checkout -- <tập-tin>…" để loại bỏ các thay đổi trong thư mục làm việc)

	đã sửa:        CONTRIBUTING.md
----

Nó chỉ cho bạn rõ ràng làm sao thể hủy những thay đổi vừa được thực hiện.
Hãy làm theo hướng dẫn:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Bản Tiếng Việt

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
Trên nhánh master
Những thay đổi sẽ được chuyển giao:
  (dùng "git reset HEAD <tập-tin>…" để bỏ ra khỏi bệ phóng)

	đã đổi tên:    README.md -> README
----

Bạn có thể thấy những thay đổi đã bị hủy bỏ.

[IMPORTANT]
=====
Điều này rất quan trọng, lệnh `git checkout -- <file>` rất là nguy hiểm.
Tất cả những gì bạn vừa làm trên tập tin đó đã biến mất - Git chỉ đơn giản sao chép một tập tin khác đè lên mà thôi.
Không bao giờ sử dụng lệnh này trừ khi bạn biết rõ ràng rằng bạn không cần đến tập tin đó.
=====

Nếu bạn chỉ tạm thời không muốn thấy nó ở đó nữa trong khi vẫn muốn giữ những thay đổi đó (để sử dụng về sau), chúng ta sẽ tìm hiểu về phân nhánh và lưu trữ (`stash`) trong chương <<_git_branching>>; chúng là các phương pháp thay thế tốt hơn.

Ghi nhớ, bất kỳ thứ gì đã chuyển giao trong Git đều có thể được phục hồi lại được bằng một cách nào đó.
Thậm chí các chuyển giao ở các nhánh đã bị xoá hoặc bị ghi đè bởi chuyển giao với tùy chọn `--amend` cũng có thể được phục hồi lại (xem thêm về phục hồi dữ liệu ở chương <<_data_recovery>>).
Tuy nhiên, bất cứ thứ gì bị mất mà chưa đuợc chuyển giao thì gần như là không có cơ hội phục hồi lại.
