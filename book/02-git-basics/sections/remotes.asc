[[_remote_repos]]
=== Làm việc với Remotes

Để có thể cùng cộng tác với các thành viên khác trên bất kỳ dự án sử dụng Git nào, bạn cần phải biết quản lý các kho chứa ở xa (remote repository) của bạn.
Các kho chứa ở xa là các phiên bản của dự án của bạn, đuợc lưu trữ trên Internet hoặc một mạng luới nào đó.
Bạn có thể có nhiều kho chứa khác nhau, một số kho chứa chỉ cho bạn quyền đọc, một số cho phép bạn đọc và ghi. 
Cộng tác với các thành viên khác liên quan đến quản lý những kho chứa này và việc đẩy dữ liệu lên và kéo dữ liệu về từ chúng khi bạn cần chia sẻ công việc.
Quản lý các kho chứa ở xa đòi hỏi phải biết cách thêm các kho chứa ở xa, xoá kho chứa không hợp lệ, quản lý nhiều nhánh khác nhau và xác định có theo dõi chúng hay không, và còn nhiều hơn thế nữa.
Trong phần này chúng ta sẽ đề cập đến các kỹ năng quản lý kho chứa ở xa này.

==== Hiển thị các Máy Chủ

Để xem bạn đã cấu hình tới máy chủ ở xa nào, bạn có thể chạy lệnh `git remote`.(((git commands, remote)))
Nó sẽ liệt kê tên ngắn gọn của mỗi máy chủ ở xa bạn đã chỉ định.
Nếu bạn sao chép nó từ một kho chứa có sẵn, ít nhất bạn sẽ thấy `origin` – tên mặc định mà Git đặt cho phiên bản trên máy chủ mà bạn đã sao chép từ đó:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Bạn cũng có thể sử dụng tham số `-v` để hiển thị URL đầy đủ (cho việc đọc và ghi) của tên rút gọn đó:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Nếu bạn có nhiều hơn một máy chủ ở xa, lệnh này sẽ liệt kê hết tất cả.
Ví dụ, một kho chứa với nhiều máy chủ để làm việc với các cộng tác viên khác nhau sẽ giống như vậy.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Điều này có nghĩa là bạn có thể kéo (`pull`) những đóng góp từ bất kỳ nguời dùng nào ở trên một cách dễ dàng. 
Chúng ta có thể có quyền để đẩy (`push`) tới một trong những máy chủ đó, tuy nhiên, với những thông tin ở đây, mình không thể biết được mình có quyền đó hay không.

Chú ý là những máy chủ ở xa đó sử dụng nhiều giao thức khác nhau; chúng ta sẽ đi vào chi tiết ở phần <<_git_on_the_server>>.

==== Thêm Kho chứa ở xa

Chúng ta đã đề cập và đưa ra một số ví dụ minh họa cho việc sử dụng lệnh `clone` tự động thêm remote `origin` cho bạn. 
Bây giờ, chúng ta sẽ nói về cách thêm một remote một cách tường minh.(((git commands, remote)))
Để them một kho chứa Git ở xa bằng một tên rút gọn để bạn có thể tham chiếu một cách dễ dàng, hãy gọi lệnh `git remote add <tên rút gọn> <url>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Bây giờ, bạn có thể sử dụng chuỗi `pb` trong câu lệnh của bạn thay cho toàn bộ URL.
Ví dụ, nếu như bạn muốn lấy (`fetch`) toàn bộ thông tin mà Paul có nhưng bạn chưa có, hãy gọi `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Lúc này, nhánh (`branch`) `master` của Paul có thể được sử dụng cục bộ bằng tên `pb/master` – bạn có thể tích hợp (`merge`) nó vào một trong các nhánh của bạn, hoặc bạn cũng có thể `checkout` ra một nhánh cục bộ nếu như bạn muốn kiểm tra nó.
(Chúng ta sẽ xem nhánh là gì và cách sử dụng chúng một cách chi tiết trong phần <<_git_branching>>.)

[[_fetching_and_pulling]]
==== Lấy và Kéo Dữ liệu về từ Remote

Như bạn vừa thấy, để lấy dữ liệu của các dự án từ xa về, bạn có thể chạy:(((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

Lệnh này sẽ truy cập vào dự án từ xa đó và kéo xuống toàn bộ dữ liệu mà bạn chưa có trong đó cho bạn.
Sau khi thực hiện xong bước này, bạn đã có các tham chiếu đến toàn bộ các nhánh của dự án từ xa đó, nơi mà bạn có thể tích hợp hoặc kiểm tra bất kỳ thời điểm nào.

Nếu bạn tạo bản sao (`clone`) từ một kho chứa nào đó khác, lệnh này sẽ tự động kho chứa từ xa đó vào dưới tên ``origin''.
Vì thế, `git fetch origin` sẽ truy xuất (`fetch`) bất kỳ thay đổi mới nào được đẩy lên (`push`) trên máy chủ từ sau khi bạn sao chép (hoặc lần truy xuất cuối cùng).
Hãy ghi nhớ một điều quan trọng là lệnh `git fetch` chỉ kéo dữ liệu về kho chứa trên máy của bạn - nó không tự động tích hợp với bất kỳ thay đổi nào mà bạn đang thực hiện.
Bạn phải tích hợp nó một cách thủ không vào kho chứa nội bộ khi đã sẵn sàng.

Nếu nhánh hiện tại của bạn được cài đặt để theo dõi một nhánh từ xa (xem phần tiếp theo và <<_git_branching>> để biết thêm thông tin), bạn có thể gọi lệnh `git pull` để tự động truy xuất và sau đó, tích hợp vào nhánh hiện tại của bạn.(((git commands, pull)))
Đây có thể là cách dễ dàng và thoải mái hơn cho bạn; và mặc định thì, lệnh `git clone` tự động cài đặt nhánh `master` nội bộ theo dõi nhanh `master` trên máy chủ từ xa - nơi mà bạn sao chép về, (giả sử máy chủ từ xa có một nhánh `master`).
Thường thì lệnh `git pull` sẽ truy xuất dữ liệu từ máy chủ trung tâm nơi lần đầu bạn sao chép và cố gắng tự động tích hợp chúng vào kho chứa hiện thời nơi bạn đang làm việc.

[[_pushing_remotes]]
==== Đẩy Lên Máy Chủ Ở Xa

Đến một thời điểm nào đó bạn muốn chia sẻ dự án của bạn, bạn phải đẩy ngược nó lên.
Câu lệnh để thực hiện rất đơn giản: `git push [tên remote] [tên nhánh]`.(((git commands, push)))
Nếu bạn muốn đẩy nhánh `master` vào máy chủ `origin` (nhắc lại, khi sao chép Git thường cài đặt/cấu hình mặc định các tên đó cho bạn), thì bạn có thể chạy lệnh sau để đẩy các công việc đã hoàn thành ngược lại máy chủ:

[source,console]
----
$ git push origin master
----

Lệnh này chỉ hoạt động nếu bạn sao chép từ một máy chủ mà trên đó bạn được cấp quyền ghi và chưa có ai khác đẩy dữ liệu lên tại thời điểm đó.
Nếu bạn và ai khác cùng sao chép tại cùng một thời điểm; người kia đẩy ngược lên, sau đó bạn cũng muốn đẩy lên, thì hành động của bạn sẽ bị từ chối ngay tức khắc.
Trước hết bạn phải thực hiện kéo (`fetch`) các thay đổi mà người đó đã thực hiện và tích hợp nó vào nhánh của bạn, sau đó bạn mới được phép đẩy lên
Xem chương <<_git_branching>> để hiểu chi tiết hơn về làm thế nào để đẩy (`push`) lên máy chủ trung tâm.

[[_inspecting_remote]]
==== Xem Chi tiết của Remote

Nếu bạn muốn xem chi tiết hơn các thông tin về một kho chứa ở xa nào đó, bạn có thể sử dụng lệnh `git remote show [remote-name]` command.(((git commands, remote)))
Nếu như bạn chạy lệnh này với một tên rút gọn, như là `origin`, bạn sẽ thấy tương tự như sau:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Lệnh này liệt kê địa chỉ của kho chứa trung tâm cũng như thông tin các nhánh đang theo dõi.
Nó cho bạn biết rằng nếu như bạn đang ở nhánh `master` và chạy lệnh `git pull`, nó sẽ tự động tích hợp nhánh này với nhánh `master` ở máy chủ sau khi truy xuất toàn bộ các tham chiếu từ xa.
Nó cũng liệt kê tất cả các tham chiếu ở xa mà nó đã kéo xuống đó.

Đây là một ví dụ đơn giản mà bạn thường xuyên gặp phải.
Khi bạn sử dụng Git thường xuyên hơn, bạn sẽ thường thấy nhiều thông tin hơn từ lệnh `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Lệnh này hiển thị nhánh nào tự động được đẩy lên khi bạn chạy `git push` trên một nhánh nhất định.
Nó cũng cho bạn thấy nhánh nào trên máy chủ mà bạn chưa có, nhánh nào bạn có mà đã bị xóa trên máy chủ, và các nhánh nào sẽ tự động được tích hợp khi chạy lệnh `git pull`.

==== Xóa Và Đổi Tên Remote

Bạn có thể gọi `git remote rename` để đổi tên rút gọn của remote.(((git commands, remote)))
Ví dụ, nếu bạn muốn đổi tên `pb` to `paul`, bạn có thể dùng lệnh `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Cần phải nhắc với các bạn là tất cả các nhánh theo dõi remote cũng sẽ bị đổi tên.
Nhánh từng có tên là `pb/master` sẽ bị đổi tên thành `paul/master`.

Nếu bạn muốn xóa một tham chiếu đi vì lý do nào đó - bạn đã chuyển máy chủ và không còn sử dụng một bản sao nhất định, hoặc có thể một người dùng nào đó không còn đóng góp vào dự án nữa - bạn có thể sử dụng `git remote rm`:

[source,console]
----
$ git remote rm paul
$ git remote
origin
----
