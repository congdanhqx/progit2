=== Căn bản

Tóm lại, Git là gì?
Đây là phần quan trọng để tiếp thu, bởi vì bạn cần hiểu Git là gì và các nguyên lý căn bản về cách Git hoạt động, sau đó sử dụng Git thế nào cho hiệu quả sẽ dễ dàng hơn.
Khi mà bạn học Git, hãy cố gắng quên những gì bạn đã biết về các hệ thống quản trị phiên bản khác, giống như là Subversion hay là Perforce; như vậy sẽ giúp bạn tránh khỏi sự bối rối khi sử dụng công cụ này.
Git "suy nghĩ" và lưu trữ về thông tin khác hẳn với Các hệ thống khác mặc dù giao diện người dùng tương đối giống nhau, hiểu được những điểm khác nhau đó sẽ giúp bạn tránh được nhiều đau khổ sau này. (((Subversion)))(((Perforce)))

==== Phiên bản tức thời, thay vì những thay đổi

Điểm khác biệt nổi bật giữa Git với các hệ thống quản lý phiên bản khác (Subversion và tương tự) là cách Git hiện thực hóa dữ liệu.
Về mặt lý thuyết, hầu hết các hệ thống khác lưu trữ thông tin dưới dạng danh sách các thay đổi.
Những hệ thống đó (CVS, Subversion, Perforce, Bazaar, v.v...) coi thông tin mà chúng lưu trữ như là tập hợp các tập tin kèm theo với những thay đổi với từng tập tin theo thời gian.

.Lưu trữ thông tin bằng các thay đổi so với phiên bản gốc của từng tập tin.
image::images/deltas.png[Lưu trữ thông tin bằng các thay đổi so với phiên bản gốc của từng tập tin.]

Git không cho rằng xử lý dữ liệu theo cách đó là tốt.
Thay vào đó, Git cho rằng thông tin của nó giống như tập hợp các ảnh hiện tại của một hệ thống thu nhỏ.
Mỗi khi bạn `commit`, hoặc lưu trạng thái hiện tại của dự án của bạn trong Git, nó sẽ ghi lại một phiên bản của tất cả các tập tin của bạn ở thời điểm đó và lưu một tham chiếu tới phiên bản đó.
Hiệu quả hơn, nếu như tập tin đó không bị thay đổi, Git không lưu thêm thông tin gì về tập tin đó, thay vào đó, nó chỉ trỏ đến phiên bản trước đó và giống y hệt nó mà thôi.
Git nghĩ về dữ liệu của nó giống như "chuỗi các bản sao chép".

.Lưu trữ dữ liệu như các bản sao chép của dự án theo thời gian.
image::images/snapshots.png[Git lưu trữ dữ liệu như các bản sao chép của dự án theo thời gian.]

Đây là sự khác biệt quan trọng giữa Git và gần như tất cả các hệ thống quản lý phiên bản khác.
Nó khiến Git cân nhắc lại gần như toàn bộ các khía cạnh của quản lý phiên bản mà đa số các hệ thống khác sao chép từ các thế hệ trước.
Điều này khiến Git giống như là một hệ thống quản lý tập tin thu nhỏ với bộ công cụ vô cùng mạnh mẽ được xây dựng trên nó, chứ không chỉ đơn giản là một hệ thống quản lý phiên bản.
Chúng ta sẽ lần lượt khám phá một số lợi ích đạt được từ việc quản lý dữ liệu theo cách này khi bàn về sự phân nhánh của Git trong phần  <<_git_branching>>.

==== Gần Như Tất Cả Các Thao Tác Đều Hoạt Động Cục Bộ

Đa số các thao tác trong Git chỉ cần các tập tin và tài nguyên cục bộ để hoạt động - về căn bản, nó sẽ không cần bất cứ thông tin nào từ các máy tính khác.
Nếu như bạn đã từng sử dụng một hệ quản lý phiên bản tập trung, nơi mà đa số các hoạt động đều chịu sự ảnh hưởng của sự trễ mạng, thì khía cạnh này của Git sẽ khiến bạn nghĩ rằng Thần Tốc Độ đã phù hộ cho Git bằng sức mạnh siêu nhiên.
Bởi vì toàn bộ dự án hoàn toàn nằm trên ổ cứng của bạn, các thao tác được thực hiện gần như ngay lập tức.

Ví dụ, khi muốn xem lịch sử của dự án, Git không cần phải lấy thông tin đó từ một máy chủ khác để hiển thị, mà đơn giản nó được đọc trực tiếp từ chính cơ sở dữ liệu cục bộ của bạn
Điều này có nghĩa là bạn có thể xem được lịch sử của dự án gần như ngay lập tức.
Nếu như bạn muốn so sánh sự thay đổi giữa phiên bản hiện tại của một tập tin với phiên bản của một tháng trước, Git có thể tìm kiếm tập tin cũ đó trên máy cục bộ rồi sau đó so sánh sự khác biệt (cũng trên máy cục bộ) cho bạn, thay vì phải yêu cầu máy chủ từ xa làm việc đó hay là phải kéo(`pull`) một phiên bản cũ của tập tin đó từ máy chủ từ xa để so sánh cục bộ.

Điều này còn đồng nghĩa với có rất ít việc mà bạn không thể làm được khi không có kết nối Internet hoặc VPN bị ngắt.
Nếu bạn muốn làm việc ngay cả khi ở trên máy bay hoặc trên tàu, bạn vẫn có thể `commit` bình thường cho tới khi có kết nối Internet để tải lên.
Nếu bạn về nhà mà VPN lại không thể kết nối được, bạn cũng vẫn có thể làm việc bình thường. 
Trong rất nhiều hệ thống khác, việc này gần như là không thể hoặc rất khó khăn.
Ví dụ, trong Perforce, bạn gần như không thể làm được gì nhiều nếu như không kết nối được tới máy chủ; trong Subversion và CVS, bạn có thể sửa tập tin nhưng bạn không thể `commit` các thay đổi đó vào cơ sở dữ liệu (vì không kết nối được với cơ sở dữ liệu).
Đây có thể không phải là điều gì đó lớn lao, nhưng bạn sẽ ngạc nhiên về sự thay đổi lớn mà nó có thể làm được.

==== Git Mang Tính Toàn Vẹn

Mọi thứ trong Git được "băm" (checksum/hash) trước khi lưu trữ và được tham chiếu tới bằng mã băm(hash) đó.
Điều này có nghĩa là không thể thay đổi nội dung của một tập tin hay một thư mục mà Git không biết.
Chức năng này được xây dựng trong Git ở tầng thấp nhất và toàn vẹn về nguyên tắc.
Bạn không thể mất thông tin/dữ liệu trong khi truyền tải hoặc nhận được một tập tin bị hỏng mà Git không phát hiện ra

Cơ chế mà Git sử dụng cho việc băm này được gọi là hàm băm SHA-1.(((SHA-1)))
Đây là một chuỗi được tạo thành bởi 40 ký tự của hệ cơ số 16 (0-9 và a-f) và được tính toán dựa trên nội dung của tập tin hoặc cấu trúc thư mục trong Git.
Một mã băm SHA-1 nhìn giống như thế này:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Các mã băm được thấy ở mọi nơi trong Git bởi vì Git dùng chúng rất nhiều.
Thực tế, Git lưu trữ mọi thứ trong cơ sở dữ liệu không phải bằng tên mà bằng mã băm tính ra từ nội dung của chúng.

==== Git Chỉ Thêm Mới Dữ Liệu

Khi bạn thực hiện các hành động trong Git, phần lớn tất cả hành động đó chỉ đưa thêm dữ liệu vào cơ sở dữ liệu của Git
Rất khó để yêu cầu hệ thống thực hiện một hành động nào đó mà không thể khôi phục lại được hoặc xoá dữ liệu đi dưới mọi hình thức.
Giống như trong tất cả hệ quản trị phiên bản khác, bạn có thể mất hoặc làm rối tung dữ liệu mà bạn chưa `commit`; nhưng khi bạn đã `commit` thì rất khó để mất các dữ liệu đó, đặc biệt là nếu bạn thường xuyên đẩy (`push`) cơ sở dữ liệu sang một kho chứa khác.

Điều này khiến việc sử dụng Git giống như niềm vui bởi vì chúng ta biết rằng mình có thể thử nghiệm mà không lo sợ sẽ phá hỏng mọi thứ.
Để có thể hiểu sâu hơn việc Git lưu trữ dữ liệu như thế nào hay làm sao để khôi phục lại dữ liệu có thể đã mất, xem <<_undoing>>.

==== Ba Trạng Thái

Bây giờ, hãy chú ý.
Đây là điều quan trọng cần ghi nhớ về Git nếu như bạn muốn hiểu được những phần tiếp theo một cách trôi chảy.
Mỗi tập tin trong Git được quản lý dựa trên ba trạng thái: đã chuyển giao - `committed`, đã sửa - `modified`, và đã lên kế hoạch - `staged`.
Đã chuyển giao - Committed có nghĩa là dữ liệu đã được lưu trữ một cách an toàn trong cơ sở dữ liệu. 
Đã sửa - Modified có nghĩa là bạn đã thay đổi tập tin nhưng chưa chuyển giao (`commit`) cho cơ sở dữ liệu.
Đã lên kế hoạch - Staged nghĩa là bạn đã đánh dấu một tập tin được thay đối ở phiên bản hiện tại sẽ được chuyển giao (`commit`) trong lần chuyển giao (`commit`) sắp tới.

Điều này đưa chúng ta tới ba phần chính của một dự án Git: thư mục Git, thư mục làm việc và hậu trường (staging area).

.Thư mục làm việc, hậu trường và thư mục Git.
image::images/areas.png["Thư mục làm việc, hậu trường và thư mục Git."]

Thư mục Git là nơi Git lưu trữ các "siêu dữ kiện" (metadata) và cơ sở dữ liệu cho dự án của bạn
Đây là phần quan trọng nhất của Git, nó là phần được sao chép về khi bạn tạo một bản sao (`clone`) của một kho chứa từ một máy tính khác.

Thư mục làm việc là bản sao (`checkout`) một phiên bản của dự án.
Những tập tin này được kéo về (`pull`) từ cơ sở dữ liệu (đã được nén) trong thư mục Git và đặt trên ổ đĩa cho bạn sử dụng hoặc chỉnh sửa.

Hậu trường là một tập tin, thường nằm trong thư mục Git của bạn, nó chứa thông tin về những gì sẽ được chuyển giao (`commit`) trong lần chuyển giao tiếp theo.
Nó đôi khi được biết đến với tên là ``chỉ mục'', nhưng nó cũng thường được nhắc đến với tên `hậu trường` (staging area).

Quy trình làm việc cơ bản của Git (thông thường):

1. Bạn thay đổi các tập tin trong thư mục làm việc.
2. Bạn đánh dấu các tập tin, thêm các ảnh chụp của chúng vào khu vực đã đánh dấu.
3. Bạn thực hiện chuyển giao (`commit`), tức là việc đem những tập tin trong hậu trường và lưu vĩnh viễn ảnh chụp vào trong thư mục Git của bạn.

Nếu như phiên bản hiện tại của tập tin đang nằm trong thư mục Git, thì trạng thái của nó là đã chuyển giao (`committed`).
Nếu nó đã bị thay đổi và được đưa vào hậu trường, thì thì trạng thái của nó là đã lên kế hoạch để chuyển giao (`stagged`).
Và nếu nó đã thay đổi kể từ khi nó được lấy về nhưng chưa được lên kế hoạch để chuyển giao, thì trạng thái của nó là đã thay đổi (`modified`).
Trong chương <<_git_basics_chapter>>, chúng ta sẽ tìm hiểu kỹ hơn về các trạng thái này cũng như làm thế nào để tận dụng lợi thế của chúng hay bỏ qua giai đoạn chuẩn bị (`staged`).
